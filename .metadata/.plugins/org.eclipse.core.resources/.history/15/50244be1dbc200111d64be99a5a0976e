package smarthome.sql;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.ResultSetMetaData;
import com.mysql.jdbc.Statement;

public class SQL {
	private static Connection conn = null;
	private static String driver = "com.mysql.jdbc.Driver";
	private String dbName = "";
	private String dbUsername = "", dbPass = "", dbHost = "", dbPort = "";

	/* Constructor */
	public SQL(String dbName, String dbUsername, String dbPass, String dbHost,
			String dbPort) {
		this.dbName = dbName;
		this.dbUsername = dbUsername;
		this.dbPass = dbPass;
		this.dbHost = dbHost;
		this.dbPort = dbPort;
	}

	/* Connect to database */
	public boolean dbConnect() {
		boolean isConnected = false;
		try {
			Class.forName(driver);
			conn = (Connection) DriverManager.getConnection("jdbc:mysql://"
					+ dbHost + ":" + dbPort + "/" + dbName, dbUsername, dbPass);
			isConnected = true;
		} catch (Exception e) {
			System.out.println("Could not connect to database server.");
		}
		return isConnected;
	}

	/* Execute SELECT Queries */
	public static ResultSet Select(String query) {
		ResultSet result = null;
		try {
			Statement s = (Statement) conn.createStatement();
			result = s.executeQuery(query);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	/* Show Results from SELECT Query */
	public static void showSelectResult(ResultSet result) {
		if (result != null) {
			try {
				ResultSetMetaData rsmd = (ResultSetMetaData) result
						.getMetaData();
				int noColumns = rsmd.getColumnCount();
				int i;
				for (i = 0; i < noColumns; i++) {
					System.out.print(rsmd.getColumnName(i + 1) + "\t");
				}
				System.out.println();
				// display results
				while (result.next()) {
					for (i = 0; i < noColumns; i++) {
						System.out.print(result.getString(i + 1) + "\t");
					}
					System.out.println();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	/* Execute NON-SELECT Queries */
	public static int Query(String query) {
		int result = -1;
		try {
			Statement s = (Statement) conn.createStatement();
			// Number of rows affected.
			result = s.executeUpdate(query);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	/* Rows affected message. */
	public static void showQueryResults(int i) {
		if (i >= 0) {
			System.out.println("" + i + " lines affected.");
		} else {
			System.out.println("Something went wrong!");
		}
	}

	/* Disconnect from DB */
	public void dbDisconnect() {
		try {
			conn.close();
			System.out.println("Connection to database closed.");
		} catch (Exception ex) {
			System.out.println("Could not close connection.");
		}

	}

}